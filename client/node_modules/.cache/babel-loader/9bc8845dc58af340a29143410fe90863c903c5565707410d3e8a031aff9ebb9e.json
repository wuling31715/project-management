{"ast":null,"code":"import * as React from 'react';\nimport React__default, { useState, useEffect } from 'react';\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nfunction useLoadScript(src) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const onLoad = () => {\n    setIsLoading(false);\n    setIsSuccess(true);\n  };\n  useEffect(() => {\n    if (!document) {\n      const error = new Error(`[ScriptLoadingError] document not defined when attempting to load ${src}`);\n      setError(error);\n      return;\n    }\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector(`script[src=\"${src}\"]`);\n    // Call onLoad if script marked as loaded.\n    if (foundScript?.dataset.loaded) {\n      onLoad();\n      return;\n    }\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad();\n    };\n    script.addEventListener(\"load\", onLoadWithMarker);\n    script.addEventListener(\"error\", err => {\n      console.error(\"Failed to load script:\", src, err);\n      const error = new Error(`[ScriptLoadingError] Failed to load script: ${src}`);\n      setError(error);\n    });\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n  }, []);\n  return {\n    isLoading,\n    error,\n    isSuccess\n  };\n}\nconst isGoogleReady = google => {\n  return google && google.charts;\n};\nconst isGoogleChartsReady = (props, google) => {\n  const {\n    controls,\n    toolbarItems,\n    getChartEditor\n  } = props;\n  return google && google.charts && google.visualization && google.visualization.ChartWrapper && google.visualization.Dashboard && (!controls || google.visualization.ChartWrapper) && (!getChartEditor || google.visualization.ChartEditor) && (!toolbarItems || google.visualization.drawToolbar);\n};\nconst getGoogleInstanceFromWindow = props => {\n  // @ts-expect-error Getting object from global namespace.\n  const google = window.google;\n  return google;\n};\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nfunction useLoadGoogleCharts(props) {\n  const {\n    chartVersion = \"current\",\n    chartPackages = [\"corechart\", \"controls\"],\n    chartLanguage = \"en\",\n    mapsApiKey\n  } = props;\n  const [googleCharts, setGoogleCharts] = useState(null);\n  const [scriptInitializationError, setScriptInitializationError] = useState(null);\n  const [googleChartsInitializationError, setGoogleChartsInitializationError] = useState(null);\n  const {\n    isLoading,\n    error: scriptLoadingError,\n    isSuccess\n  } = useLoadScript(props.chartLoaderScriptUrl || \"https://www.gstatic.com/charts/loader.js\");\n  useEffect(() => {\n    if (!isSuccess) {\n      return;\n    }\n    const google = getGoogleInstanceFromWindow();\n    if (!isGoogleReady(google)) {\n      const error = new Error(\"[ScriptInitializationError] Script loaded but Google not attached to window.\");\n      setScriptInitializationError(error);\n      return;\n    }\n    if (isGoogleChartsReady(props, google)) {\n      setGoogleCharts(google);\n      return;\n    }\n    google.charts.load(chartVersion, {\n      packages: chartPackages,\n      language: chartLanguage,\n      mapsApiKey\n    });\n    google.charts.setOnLoadCallback(() => {\n      if (!isGoogleChartsReady(props, google)) {\n        const error = new Error(\"[GoogleChartsInitializationError] Google Charts not ready after load callback.\");\n        console.error(error);\n        setGoogleChartsInitializationError(error);\n        return;\n      }\n      setGoogleCharts(google);\n    });\n  }, [isSuccess]);\n  return {\n    error: scriptLoadingError || scriptInitializationError || googleChartsInitializationError,\n    isLoading,\n    google: googleCharts\n  };\n}\nconst chartDefaultProps = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1\n  },\n  rootProps: {},\n  chartWrapperParams: {},\n  chartLoaderScriptUrl: \"https://www.gstatic.com/charts/loader.js\"\n};\nconst GoogleChartControls = props => {\n  const {\n    isReady,\n    chartControls,\n    filter\n  } = props;\n  if (!isReady || !chartControls || !chartControls?.length) {\n    return null;\n  }\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, chartControls.filter(param => {\n    let {\n      controlProp,\n      control\n    } = param;\n    return filter ? filter({\n      control,\n      controlProp\n    }) : true;\n  }).map(param => {\n    let {\n      control\n    } = param;\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      key: control.getContainerId(),\n      id: control.getContainerId()\n    });\n  }));\n};\nlet uniqueID = 0;\nconst generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\n\n/**\n * An internal helper class for creating and managing Google Charts controls.\n * Offers high-level methods to interact with the Google Chart Controls.\n */\nclass GoogleChartControlsInternal {\n  /**\n  * Initialize the controls once chart is ready\n  */\n  static initializeControls = googleChartControls => {\n    for (let i = 0; i < googleChartControls.length; i += 1) {\n      const {\n        controlType,\n        options,\n        controlWrapperParams\n      } = googleChartControls[i].controlProp;\n      if (controlWrapperParams && \"state\" in controlWrapperParams) {\n        googleChartControls[i].control.setState(controlWrapperParams[\"state\"]);\n      }\n      googleChartControls[i].control.setOptions(options);\n      googleChartControls[i].control.setControlType(controlType);\n    }\n  };\n  /**\n  * listen to the control events (ready, statechange, error) specified in the controlEvents prop\n  */\n  static listenToControlEvents = (googleChartControls, props) => {\n    const {\n      google\n    } = props;\n    return googleChartControls.flatMap(chartControl => {\n      const {\n        control,\n        controlProp\n      } = chartControl;\n      const {\n        controlEvents = []\n      } = controlProp;\n      return controlEvents.map(event => {\n        const {\n          callback,\n          eventName\n        } = event;\n        return google.visualization.events.addListener(control, eventName, function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          callback({\n            chartWrapper: null,\n            controlWrapper: control,\n            props: props,\n            google: google,\n            eventArgs: args\n          });\n        });\n      });\n    });\n  };\n  /**\n  * If controlID is not provided, generate a unique controlID\n  */\n  static createControlId = id => {\n    let controlID;\n    if (typeof id === \"undefined\") {\n      controlID = `googlechart-control-${generateUniqueID()}`;\n    } else {\n      controlID = id;\n    }\n    return controlID;\n  };\n  /**\n  * Map the control props to Google Chart Controls\n  */\n  static createChartControls = props => {\n    const {\n      controls,\n      google\n    } = props;\n    if (!controls) {\n      return null;\n    }\n    return controls.map((control, i) => {\n      const {\n        controlID: controlIDMaybe,\n        controlType,\n        options: controlOptions,\n        controlWrapperParams\n      } = control;\n      const controlID = this.createControlId(controlIDMaybe);\n      return {\n        controlProp: control,\n        control: new google.visualization.ControlWrapper({\n          containerId: controlID,\n          controlType,\n          options: controlOptions,\n          ...controlWrapperParams\n        })\n      };\n    });\n  };\n  static addControls = props => {\n    const {\n      chartWrapper,\n      chartDashboard\n    } = props;\n    const googleChartControls = this.createChartControls(props);\n    if (!googleChartControls || !chartDashboard || !chartWrapper) {\n      return null;\n    }\n    chartDashboard.bind(googleChartControls.map(param => {\n      let {\n        control\n      } = param;\n      return control;\n    }), chartWrapper);\n    this.initializeControls(googleChartControls);\n    return googleChartControls;\n  };\n}\nconst useCreateChartControls = controls => {\n  const [chartControls, setChartControls] = React.useState(null);\n  const controlAndProp = React.useMemo(() => {\n    if (!chartControls || !controls) return null;\n    return controls.map((controlProp, i) => {\n      const control = chartControls[i];\n      return control ? {\n        controlProp,\n        control\n      } : undefined;\n    }).flatMap(controlAndProp => controlAndProp ? [controlAndProp] : []);\n  }, [chartControls, controls]);\n  return [controlAndProp, setChartControls];\n};\nconst useListenToControlEvents = (chartControls, props) => {\n  React.useEffect(() => {\n    const listeners = GoogleChartControlsInternal.listenToControlEvents(chartControls ?? [], props);\n    return () => {\n      listeners.forEach(listener => {\n        props.google.visualization.events.removeListener(listener);\n      });\n    };\n  }, [chartControls, props]);\n};\nconst useChartControls = props => {\n  const [chartControls, setChartControls] = useCreateChartControls(props.controls);\n  useListenToControlEvents(chartControls ?? [], props);\n  /**\n  * Render the container divs for the controls\n  */\n  const renderControl = filter => {\n    const {\n      chartWrapper,\n      chartDashboard\n    } = props;\n    return /*#__PURE__*/React.createElement(GoogleChartControls, {\n      ...props,\n      isReady: Boolean(chartWrapper && chartDashboard),\n      chartControls: chartControls,\n      filter: filter\n    });\n  };\n  return {\n    addControls: props => {\n      const controls = GoogleChartControlsInternal.addControls(props);\n      setChartControls(controls?.map(control => control.control) ?? null);\n    },\n    renderControl\n  };\n};\nconst useChartId = props => {\n  const chartIdRef = React.useRef(null);\n  const getChartId = () => {\n    const {\n      graphID,\n      graph_id\n    } = props;\n    const chartIdFromProps = graphID || graph_id;\n    let currentChartId;\n    if (chartIdFromProps) {\n      currentChartId = chartIdFromProps;\n    } else {\n      currentChartId = chartIdRef.current || generateUniqueID();\n    }\n    chartIdRef.current = currentChartId;\n    return chartIdRef.current;\n  };\n  const chartId = getChartId();\n  return {\n    chartId\n  };\n};\nconst DEFAULT_CHART_COLORS = [\"#3366CC\", \"#DC3912\", \"#FF9900\", \"#109618\", \"#990099\", \"#3B3EAC\", \"#0099C6\", \"#DD4477\", \"#66AA00\", \"#B82E2E\", \"#316395\", \"#994499\", \"#22AA99\", \"#AAAA11\", \"#6633CC\", \"#E67300\", \"#8B0707\", \"#329262\", \"#5574A6\", \"#3B3EAC\"];\nconst loadDataTableFromSpreadSheet = async function (googleViz, spreadSheetUrl) {\n  let urlParams = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n  return new Promise((resolve, reject) => {\n    const headers = `${urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`}`;\n    const queryString = `${urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``}`;\n    const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n    const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n    const access_token = `${urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"}`;\n    const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n    const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send(response => {\n      if (response.isError()) {\n        reject(`Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`);\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\nconst GRAY_COLOR = \"#CCCCCC\";\n/**\n * An internal helper class around the Google Chart API.\n * Offers high-level methods to interact with the Google Chart API.\n */\nclass GoogleChartInternal {\n  static grayOutHiddenColumnsLabel = (props, hiddenColumns) => {\n    const {\n      googleChartWrapper,\n      options\n    } = props;\n    if (!googleChartWrapper) {\n      console.error(\"googleChartWrapper is not defined\");\n      return;\n    }\n    const dataTable = googleChartWrapper.getDataTable();\n    if (!dataTable) return;\n    const columnCount = dataTable.getNumberOfColumns();\n    const hasAHiddenColumn = hiddenColumns.length > 0;\n    if (hasAHiddenColumn === false) return;\n    const colors = Array.from({\n      length: columnCount - 1\n    }).map((_dontcare, i) => {\n      const columnID = this.getColumnId(dataTable, i + 1);\n      if (hiddenColumns.includes(columnID)) {\n        return GRAY_COLOR;\n      } else if (options && options.colors) {\n        return options.colors[i];\n      } else {\n        return DEFAULT_CHART_COLORS[i];\n      }\n    });\n    googleChartWrapper.setOptions({\n      ...options,\n      colors\n    });\n    googleChartWrapper.draw();\n  };\n  /**\n  * Listens to user clicking on the legend to toggle the visibility of a column.\n  * When a user clicks on a legend item, the column id is added to / removed from the hiddenColumns state.\n  */\n  static listenToLegendToggle = (props, hiddenColumnsState) => {\n    const [hiddenColumns, setHiddenColumns] = hiddenColumnsState;\n    const {\n      google,\n      googleChartWrapper\n    } = props;\n    if (!googleChartWrapper) {\n      console.error(\"googleChartWrapper is not defined\");\n      return;\n    }\n    return google.visualization.events.addListener(googleChartWrapper, \"select\", () => {\n      const chart = googleChartWrapper.getChart();\n      const selection = chart.getSelection();\n      const dataTable = googleChartWrapper.getDataTable();\n      if (selection.length === 0 ||\n      // We want to listen to when a whole row is selected. This is the case only when row === null\n      selection[0].row !== null || !dataTable) {\n        return;\n      }\n      const columnIndex = selection[0].column;\n      const columnID = this.getColumnId(dataTable, columnIndex);\n      // If the column is hidden remove it from state, otherwise add it\n      if (hiddenColumns?.includes(columnID)) {\n        setHiddenColumns(state => [...state.filter(colID => colID !== columnID)]);\n      } else {\n        setHiddenColumns(state => [...state, columnID]);\n      }\n    });\n  };\n  /**\n  * (Re-)Draw a Google Chart with the given data, options, and chart type.\n  */\n  static draw = async props => {\n    const {\n      data,\n      diffdata,\n      rows,\n      columns,\n      options,\n      chartType,\n      formatters,\n      spreadSheetUrl,\n      spreadSheetQueryParameters,\n      googleChartDashboard,\n      googleChartWrapper,\n      google,\n      hiddenColumns,\n      legendToggle,\n      legend_toggle\n    } = props;\n    if (!googleChartWrapper) {\n      console.error(\"draw was called with googleChartWrapper = null\");\n      return;\n    }\n    let dataTable;\n    let chartDiff = null;\n    if (diffdata) {\n      const oldData = google.visualization.arrayToDataTable(diffdata.old);\n      const newData = google.visualization.arrayToDataTable(diffdata.new);\n      chartDiff = google.visualization[chartType].prototype.computeDiff(oldData, newData);\n    }\n    if (data) {\n      if (data instanceof google.visualization.DataTable) {\n        dataTable = data;\n      } else if (Array.isArray(data)) {\n        dataTable = google.visualization.arrayToDataTable(data);\n      } else {\n        dataTable = new google.visualization.DataTable(data);\n      }\n    } else if (rows && columns) {\n      dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n    } else if (spreadSheetUrl) {\n      dataTable = await loadDataTableFromSpreadSheet(google, spreadSheetUrl, spreadSheetQueryParameters);\n    } else {\n      dataTable = google.visualization.arrayToDataTable([]);\n    }\n    const columnCount = dataTable.getNumberOfColumns();\n    const viewColumns = Array(columnCount).fill(0).map((_c, i) => {\n      const columnID = this.getColumnId(dataTable, i);\n      if (hiddenColumns.includes(columnID)) {\n        return {\n          label: dataTable.getColumnLabel(i),\n          type: dataTable.getColumnType(i),\n          calc: () => null\n        };\n      } else {\n        return i;\n      }\n    });\n    const chart = googleChartWrapper.getChart();\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      chart && chart.clearChart();\n    }\n    googleChartWrapper.setChartType(chartType);\n    googleChartWrapper.setOptions(options || {});\n    const viewTable = new google.visualization.DataView(dataTable);\n    viewTable.setColumns(viewColumns);\n    googleChartWrapper.setDataTable(viewTable);\n    googleChartWrapper.draw();\n    if (googleChartDashboard) {\n      googleChartDashboard.draw(dataTable);\n    }\n    if (chartDiff) {\n      googleChartWrapper.setDataTable(chartDiff);\n      googleChartWrapper.draw();\n    }\n    if (formatters) {\n      this.applyFormatters({\n        dataTable,\n        formatters,\n        google\n      });\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n    }\n    if (legendToggle === true || legend_toggle === true) {\n      this.grayOutHiddenColumnsLabel(props, hiddenColumns);\n    }\n    return;\n  };\n  /**\n  * Get the column ID of a column in a GoogleDataTable.\n  * If the column has an ID, return the ID, otherwise return the label.\n  */\n  static getColumnId = (dataTable, columnIndex) => {\n    return dataTable.getColumnId(columnIndex) || dataTable.getColumnLabel(columnIndex);\n  };\n  /**\n  * Apply Chart Formatters passed under the formatters prop to the GoogleDataTable\n  */\n  static applyFormatters = param => {\n    let {\n      dataTable,\n      formatters,\n      google\n    } = param;\n    for (let formatter of formatters) {\n      switch (formatter.type) {\n        case \"ArrowFormat\":\n          {\n            const vizFormatter = new google.visualization.ArrowFormat(formatter.options);\n            vizFormatter.format(dataTable, formatter.column);\n            return;\n          }\n        case \"BarFormat\":\n          {\n            const vizFormatter = new google.visualization.BarFormat(formatter.options);\n            vizFormatter.format(dataTable, formatter.column);\n            return;\n          }\n        case \"ColorFormat\":\n          {\n            const vizFormatter = new google.visualization.ColorFormat(formatter.options);\n            const {\n              ranges\n            } = formatter;\n            if (ranges) {\n              for (let range of ranges) {\n                vizFormatter.addRange(...range);\n              }\n            }\n            vizFormatter.format(dataTable, formatter.column);\n            return;\n          }\n        case \"DateFormat\":\n          {\n            const vizFormatter = new google.visualization.DateFormat(formatter.options);\n            vizFormatter.format(dataTable, formatter.column);\n            return;\n          }\n        case \"NumberFormat\":\n          {\n            const vizFormatter = new google.visualization.NumberFormat(formatter.options);\n            vizFormatter.format(dataTable, formatter.column);\n            return;\n          }\n        case \"PatternFormat\":\n          {\n            const vizFormatter = new google.visualization.PatternFormat(formatter.options);\n            vizFormatter.format(dataTable, formatter.column);\n            return;\n          }\n        default:\n          {\n            console.warn(`Unknown formatter type: ${formatter.type}`);\n            return;\n          }\n      }\n    }\n  };\n}\nconst useGoogleChartDataTable = props => {\n  const {\n    google,\n    googleChartWrapper,\n    googleChartDashboard\n  } = props;\n  const [hiddenColumns, setHiddenColumns] = React.useState([]);\n  // Re-draw the chart when hiddenColumns change\n  React.useEffect(() => {\n    if (!googleChartWrapper) {\n      return;\n    }\n    GoogleChartInternal.draw({\n      ...props,\n      hiddenColumns,\n      googleChartWrapper,\n      googleChartDashboard,\n      google\n    });\n  }, [hiddenColumns, props.data, props.rows, props.columns, props.options, props.chartLoaderScriptUrl, props.chartType, props.formatters, props.spreadSheetUrl, props.spreadSheetQueryParameters, props.legendToggle, props.legend_toggle]);\n  // Re-draw the chart when the window is resized\n  const onResize = () => {\n    const {\n      googleChartWrapper\n    } = props;\n    if (!googleChartWrapper) {\n      return;\n    }\n    googleChartWrapper.draw();\n  };\n  // Draw the chart when the google charts wrapper is ready and when the hiddenColumns change\n  const initialize = googleChartWrapper => {\n    const listeners = [];\n    const {\n      legendToggle,\n      legend_toggle\n    } = props;\n    GoogleChartInternal.draw({\n      ...props,\n      hiddenColumns,\n      googleChartWrapper,\n      googleChartDashboard,\n      google\n    });\n    window.addEventListener(\"resize\", onResize);\n    if (legend_toggle || legendToggle) {\n      const listener = GoogleChartInternal.listenToLegendToggle(props, [hiddenColumns, setHiddenColumns]);\n      if (listener) listeners.push(listener);\n    }\n    return listeners;\n  };\n  // Remove event listeners and clear the chart when the component is unmounted\n  const destroy = (googleChartWrapper, listeners) => {\n    window.removeEventListener(\"resize\", onResize);\n    listeners.forEach(listener => {\n      google.visualization.events.removeListener(listener);\n    });\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() && googleChartWrapper.getChart().clearChart();\n    }\n  };\n  React.useEffect(() => {\n    if (!googleChartWrapper) {\n      return;\n    }\n    const listeners = initialize(googleChartWrapper);\n    return () => {\n      destroy(googleChartWrapper, listeners);\n    };\n  }, [googleChartWrapper, initialize, destroy]);\n};\nconst listenToEvents = props => {\n  const {\n    chartEvents,\n    google,\n    googleChartWrapper\n  } = props;\n  if (!chartEvents) {\n    return;\n  }\n  if (!googleChartWrapper) {\n    console.warn(\"listenToEvents was called before chart wrapper ready.\");\n    return;\n  }\n  return chartEvents.map(param => {\n    let {\n      eventName,\n      callback\n    } = param;\n    return google.visualization.events.addListener(googleChartWrapper, eventName, function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      callback({\n        chartWrapper: googleChartWrapper,\n        props,\n        google: google,\n        eventArgs: args\n      });\n    });\n  });\n};\nconst useGoogleChartEvents = props => {\n  useEffect(() => {\n    if (!props.googleChartWrapper) return;\n    const listeners = listenToEvents(props);\n    return () => {\n      listeners?.forEach(listener => {\n        props.google.visualization.events.removeListener(listener);\n      });\n    };\n  }, [props]);\n};\nconst GoogleChart = props => {\n  const [googleChartWrapper, setGoogleChartWrapper] = React.useState(null);\n  // const [isReady, setIsReady] = React.useState<boolean>(false);\n  const [googleChartDashboard, setGoogleChartDashboard] = React.useState(null);\n  const {\n    addControls,\n    renderControl\n  } = useChartControls({\n    ...props,\n    chartDashboard: googleChartDashboard,\n    chartWrapper: googleChartWrapper\n  });\n  useGoogleChartEvents({\n    ...props,\n    googleChartWrapper\n  });\n  const {\n    chartId\n  } = useChartId(props);\n  const dashboardRef = React.useRef(null);\n  const toolbarRef = React.useRef(null);\n  React.useEffect(() => {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper,\n      onLoad\n    } = props;\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: chartId,\n      ...chartWrapperParams\n    };\n    // Create ChartWrapper instance, pass it to the user and store it in state\n    const chartWrapper = new google.visualization.ChartWrapper(chartConfig);\n    chartWrapper.setOptions(options || {});\n    getChartWrapper?.(chartWrapper, google);\n    // Create Dashboard instance, needed for controls\n    const chartDashboard = new google.visualization.Dashboard(dashboardRef.current);\n    // Create toolbar if needed\n    if (toolbarItems) {\n      google.visualization.drawToolbar(toolbarRef.current, toolbarItems);\n    }\n    // Create ChartEditor instance if needed and pass it to the user\n    let chartEditor = null;\n    if (getChartEditor) {\n      chartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor,\n        chartWrapper,\n        google\n      });\n    }\n    // Create and add controls to the chart / dashboard\n    addControls({\n      ...props,\n      chartDashboard,\n      chartWrapper\n    });\n    setGoogleChartWrapper(chartWrapper);\n    setGoogleChartDashboard(chartDashboard);\n    onLoad?.(google, {\n      google,\n      chartWrapper,\n      chartEditor,\n      chartDashboard\n    });\n  }, []);\n  useGoogleChartDataTable({\n    ...props,\n    googleChartWrapper,\n    googleChartDashboard\n  });\n  const renderChart = () => {\n    const {\n      width,\n      height,\n      options,\n      style,\n      className,\n      rootProps,\n      google\n    } = props;\n    const divStyle = {\n      height: height || options && options.height,\n      width: width || options && options.width,\n      ...style\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: chartId,\n      style: divStyle,\n      className: className,\n      ...rootProps\n    });\n  };\n  const renderToolBar = () => {\n    if (!props.toolbarItems) return null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: toolbarRef\n    });\n  };\n  const {\n    width,\n    height,\n    options,\n    style\n  } = props;\n  const divStyle = {\n    height: height || options && options.height,\n    width: width || options && options.width,\n    ...style\n  };\n  // If render prop is provided, give the user full control over the rendering by passing renderChart, renderControl and renderToolbar functions\n  if (props.render) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: dashboardRef,\n      style: divStyle\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: toolbarRef,\n      id: \"toolbar\"\n    }), props.render({\n      renderChart,\n      renderControl,\n      renderToolbar: renderToolBar\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: dashboardRef,\n      style: divStyle\n    }, renderControl(param => {\n      let {\n        controlProp\n      } = param;\n      return controlProp.controlPosition !== \"bottom\";\n    }), renderChart(), renderControl(param => {\n      let {\n        controlProp\n      } = param;\n      return controlProp.controlPosition === \"bottom\";\n    }), renderToolBar());\n  }\n};\nconst ChartContext = /*#__PURE__*/React.createContext(chartDefaultProps);\nconst ContextProvider = param => {\n  let {\n    children,\n    value\n  } = param;\n  return /*#__PURE__*/React.createElement(ChartContext.Provider, {\n    value: value\n  }, children);\n};\n\n/**\n * Loads Google Charts JS and renders the GoogleChart component.\n */\nconst ChartView = props => {\n  const {\n    google,\n    isLoading,\n    error\n  } = useLoadGoogleCharts(props);\n  if (isLoading) {\n    return props.loader ?? null;\n  }\n  if (error) {\n    return props.errorElement ?? null;\n  }\n  if (google) {\n    return /*#__PURE__*/React__default.createElement(GoogleChart, {\n      google: google,\n      ...props\n    });\n  }\n  return null;\n};\n/**\n * Updates the context with the props and renders ChartView.\n */\nconst Chart = userProps => {\n  const props = {\n    ...chartDefaultProps,\n    ...userProps\n  };\n  return /*#__PURE__*/React__default.createElement(ContextProvider, {\n    value: props\n  }, /*#__PURE__*/React__default.createElement(ChartView, props));\n};\n\n// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\nvar GoogleDataTableColumnRoleType;\n(function (GoogleDataTableColumnRoleType) {\n  GoogleDataTableColumnRoleType[\"annotation\"] = \"annotation\";\n  GoogleDataTableColumnRoleType[\"annotationText\"] = \"annotationText\";\n  GoogleDataTableColumnRoleType[\"certainty\"] = \"certainty\";\n  GoogleDataTableColumnRoleType[\"emphasis\"] = \"emphasis\";\n  GoogleDataTableColumnRoleType[\"interval\"] = \"interval\";\n  GoogleDataTableColumnRoleType[\"scope\"] = \"scope\";\n  GoogleDataTableColumnRoleType[\"style\"] = \"style\";\n  GoogleDataTableColumnRoleType[\"tooltip\"] = \"tooltip\";\n  GoogleDataTableColumnRoleType[\"domain\"] = \"domain\";\n})(GoogleDataTableColumnRoleType || (GoogleDataTableColumnRoleType = {}));\nexport { Chart, GoogleDataTableColumnRoleType, Chart as default };","map":{"version":3,"names":["useLoadScript","src","isLoading","setIsLoading","useState","error","setError","isSuccess","setIsSuccess","onLoad","useEffect","document","Error","foundScript","querySelector","dataset","loaded","script","createElement","onLoadWithMarker","addEventListener","err","console","head","append","isGoogleReady","google","charts","isGoogleChartsReady","props","controls","toolbarItems","getChartEditor","visualization","ChartWrapper","Dashboard","ChartEditor","drawToolbar","getGoogleInstanceFromWindow","window","useLoadGoogleCharts","chartVersion","chartPackages","chartLanguage","mapsApiKey","googleCharts","setGoogleCharts","scriptInitializationError","setScriptInitializationError","googleChartsInitializationError","setGoogleChartsInitializationError","scriptLoadingError","chartLoaderScriptUrl","load","packages","language","setOnLoadCallback","chartDefaultProps","legend_toggle","options","legendToggle","getChartWrapper","spreadSheetQueryParameters","headers","gid","rootProps","chartWrapperParams","GoogleChartControls","isReady","chartControls","filter","length","React__default","Fragment","param","controlProp","control","map","key","getContainerId","id","uniqueID","generateUniqueID","GoogleChartControlsInternal","initializeControls","googleChartControls","i","controlType","controlWrapperParams","setState","setOptions","setControlType","listenToControlEvents","flatMap","chartControl","controlEvents","event","callback","eventName","events","addListener","_len","arguments","args","Array","_key","chartWrapper","controlWrapper","eventArgs","createControlId","controlID","createChartControls","controlIDMaybe","controlOptions","ControlWrapper","containerId","addControls","chartDashboard","bind","useCreateChartControls","setChartControls","React","controlAndProp","useMemo","undefined","useListenToControlEvents","listeners","forEach","listener","removeListener","useChartControls","renderControl","Boolean","useChartId","chartIdRef","useRef","getChartId","graphID","graph_id","chartIdFromProps","currentChartId","current","chartId","DEFAULT_CHART_COLORS","loadDataTableFromSpreadSheet","googleViz","spreadSheetUrl","urlParams","Promise","resolve","reject","queryString","query","encodeURIComponent","sheet","access_token","urlQueryString","urlToSpreadSheet","Query","send","response","isError","getMessage","getDetailedMessage","getDataTable","GRAY_COLOR","GoogleChartInternal","grayOutHiddenColumnsLabel","hiddenColumns","googleChartWrapper","dataTable","columnCount","getNumberOfColumns","hasAHiddenColumn","colors","from","_dontcare","columnID","getColumnId","includes","draw","listenToLegendToggle","hiddenColumnsState","setHiddenColumns","chart","getChart","selection","getSelection","row","columnIndex","column","state","colID","data","diffdata","rows","columns","chartType","formatters","googleChartDashboard","chartDiff","oldData","arrayToDataTable","old","newData","new","prototype","computeDiff","DataTable","isArray","viewColumns","fill","_c","label","getColumnLabel","type","getColumnType","calc","getChartType","clearChart","setChartType","viewTable","DataView","setColumns","setDataTable","applyFormatters","formatter","vizFormatter","ArrowFormat","format","BarFormat","ColorFormat","ranges","range","addRange","DateFormat","NumberFormat","PatternFormat","warn","useGoogleChartDataTable","onResize","initialize","push","destroy","removeEventListener","listenToEvents","chartEvents","useGoogleChartEvents","GoogleChart","setGoogleChartWrapper","setGoogleChartDashboard","dashboardRef","toolbarRef","chartConfig","chartEditor","renderChart","width","height","style","className","divStyle","renderToolBar","ref","render","renderToolbar","controlPosition","ChartContext","createContext","ContextProvider","children","value","Provider","ChartView","loader","errorElement","Chart","userProps","GoogleDataTableColumnRoleType"],"sources":["C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\hooks\\useLoadScript.ts","C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\hooks\\useLoadGoogleCharts.ts","C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\default-props.ts","C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\components\\GoogleChartControls.tsx","C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\generate-unique-id.ts","C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\utils\\GoogleChartControlsInternal.ts","C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\hooks\\internal\\useGoogleChartControls.tsx","C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\hooks\\internal\\useChartId.ts","C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\constants.ts","C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\load-data-table-from-spreadsheet.ts","C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\utils\\GoogleChartInternal.ts","C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\hooks\\internal\\useGoogleChartDataTable.ts","C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\hooks\\internal\\useGoogleChartEvents.ts","C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\components\\GoogleChart.tsx","C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\Context.tsx","C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\Chart.tsx","C:\\Users\\Danny\\code\\project-management-app\\client\\node_modules\\react-google-charts\\src\\types.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nexport function useLoadScript(src: string) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const onLoad = () => {\n    setIsLoading(false);\n    setIsSuccess(true);\n  };\n  useEffect(() => {\n    if (!document) {\n      const error = new Error(\n        `[ScriptLoadingError] document not defined when attempting to load ${src}`,\n      );\n      setError(error);\n      return;\n    }\n\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector<HTMLScriptElement>(\n      `script[src=\"${src}\"]`,\n    );\n\n    // Call onLoad if script marked as loaded.\n    if (foundScript?.dataset.loaded) {\n      onLoad();\n      return;\n    }\n\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    script.addEventListener(\"error\", (err) => {\n      console.error(\"Failed to load script:\", src, err);\n      const error = new Error(\n        `[ScriptLoadingError] Failed to load script: ${src}`,\n      );\n      setError(error);\n    });\n\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n  }, []);\n  return {\n    isLoading,\n    error,\n    isSuccess,\n  };\n}\n","import { useState, useEffect } from \"react\";\nimport {\n  GoogleChartVersion,\n  GoogleChartPackages,\n  GoogleViz,\n  ReactGoogleChartProps,\n} from \"../types\";\nimport { useLoadScript } from \"./useLoadScript\";\n\nexport interface IUseLoadGoogleChartsParams {\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n}\n\nconst isGoogleReady = (google?: GoogleViz) => {\n  return google && google.charts;\n};\n\nconst isGoogleChartsReady = (\n  props: ReactGoogleChartProps,\n  google?: GoogleViz,\n) => {\n  const { controls, toolbarItems, getChartEditor } = props;\n  return (\n    google &&\n    google.charts &&\n    google.visualization &&\n    google.visualization.ChartWrapper &&\n    google.visualization.Dashboard &&\n    (!controls || google.visualization.ChartWrapper) &&\n    (!getChartEditor || google.visualization.ChartEditor) &&\n    (!toolbarItems || google.visualization.drawToolbar)\n  );\n};\n\nconst getGoogleInstanceFromWindow = (props: ReactGoogleChartProps) => {\n  // @ts-expect-error Getting object from global namespace.\n  const google = window.google as GoogleViz;\n  return google;\n};\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nexport function useLoadGoogleCharts(props: ReactGoogleChartProps) {\n  const {\n    chartVersion = \"current\",\n    chartPackages = [\"corechart\", \"controls\"],\n    chartLanguage = \"en\",\n    mapsApiKey,\n  } = props;\n  const [googleCharts, setGoogleCharts] = useState<GoogleViz | null>(null);\n  const [scriptInitializationError, setScriptInitializationError] =\n    useState<Error | null>(null);\n  const [googleChartsInitializationError, setGoogleChartsInitializationError] =\n    useState<Error | null>(null);\n  const {\n    isLoading,\n    error: scriptLoadingError,\n    isSuccess,\n  } = useLoadScript(\n    props.chartLoaderScriptUrl || \"https://www.gstatic.com/charts/loader.js\",\n  );\n\n  useEffect(() => {\n    if (!isSuccess) {\n      return;\n    }\n    const google = getGoogleInstanceFromWindow(props);\n    if (!isGoogleReady(google)) {\n      const error = new Error(\n        \"[ScriptInitializationError] Script loaded but Google not attached to window.\",\n      );\n      setScriptInitializationError(error);\n      return;\n    }\n    if (isGoogleChartsReady(props, google)) {\n      setGoogleCharts(google);\n      return;\n    }\n    google.charts.load(chartVersion, {\n      packages: chartPackages,\n      language: chartLanguage,\n      mapsApiKey,\n    });\n    google.charts.setOnLoadCallback(() => {\n      if (!isGoogleChartsReady(props, google)) {\n        const error = new Error(\n          \"[GoogleChartsInitializationError] Google Charts not ready after load callback.\",\n        );\n        console.error(error);\n        setGoogleChartsInitializationError(error);\n        return;\n      }\n      setGoogleCharts(google);\n    });\n  }, [isSuccess]);\n  return {\n    error:\n      scriptLoadingError ||\n      scriptInitializationError ||\n      googleChartsInitializationError,\n    isLoading,\n    google: googleCharts,\n  };\n}\n\nexport interface ILoadGoogleChartsProps extends IUseLoadGoogleChartsParams {\n  onLoad?(googleCharts: GoogleViz): void;\n  onError?(): void;\n}\n","import { ReactGoogleChartProps } from \"./types\";\n\nexport const chartDefaultProps: Partial<ReactGoogleChartProps> = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1,\n  },\n  rootProps: {},\n  chartWrapperParams: {},\n  chartLoaderScriptUrl: \"https://www.gstatic.com/charts/loader.js\",\n};\n","import React from \"react\";\nimport { GoogleChartControlAndProp } from \"../hooks/internal/useGoogleChartControls\";\n\nexport type FilterControl = (control: GoogleChartControlAndProp) => boolean;\n\ntype Props = {\n  isReady: boolean;\n  chartControls: GoogleChartControlAndProp[] | null;\n  filter?: FilterControl;\n};\nexport const GoogleChartControls = (props: Props) => {\n  const { isReady, chartControls, filter } = props;\n  if (!isReady || !chartControls || !chartControls?.length) {\n    return null;\n  }\n  return (\n    <>\n      {chartControls\n        .filter(({ controlProp, control }) => {\n          return filter ? filter({ control, controlProp }) : true;\n        })\n        .map(({ control }) => {\n          return (\n            <div key={control.getContainerId()} id={control.getContainerId()} />\n          );\n        })}\n    </>\n  );\n};\n","let uniqueID = 0;\nexport const generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\n","import {\n  GoogleViz,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  UseChartControlsParams,\n} from \"../types\";\nimport { generateUniqueID } from \"../generate-unique-id\";\n\nexport type Props = ReactGoogleChartProps & {\n  google: GoogleViz;\n};\n\nexport type GoogleChartControlAndProp = {\n  controlProp: GoogleChartControlProp;\n  control: GoogleChartControl;\n};\n\n/**\n * An internal helper class for creating and managing Google Charts controls.\n * Offers high-level methods to interact with the Google Chart Controls.\n */\nexport class GoogleChartControlsInternal {\n  /**\n   * Initialize the controls once chart is ready\n   */\n  private static initializeControls = (\n    googleChartControls: GoogleChartControlAndProp[],\n  ) => {\n    for (let i = 0; i < googleChartControls.length; i += 1) {\n      const { controlType, options, controlWrapperParams } =\n        googleChartControls[i].controlProp;\n      if (controlWrapperParams && \"state\" in controlWrapperParams) {\n        googleChartControls[i].control.setState(controlWrapperParams[\"state\"]);\n      }\n      googleChartControls[i].control.setOptions(options);\n      googleChartControls[i].control.setControlType(controlType);\n    }\n  };\n\n  /**\n   * listen to the control events (ready, statechange, error) specified in the controlEvents prop\n   */\n  public static listenToControlEvents = (\n    googleChartControls: GoogleChartControlAndProp[],\n    props: UseChartControlsParams,\n  ) => {\n    const { google } = props;\n    return googleChartControls.flatMap((chartControl) => {\n      const { control, controlProp } = chartControl;\n      const { controlEvents = [] } = controlProp;\n      return controlEvents.map((event) => {\n        const { callback, eventName } = event;\n        return google.visualization.events.addListener(\n          control,\n          eventName,\n          (...args) => {\n            callback({\n              chartWrapper: null,\n              controlWrapper: control,\n              props: props,\n              google: google,\n              eventArgs: args,\n            });\n          },\n        );\n      });\n    });\n  };\n\n  /**\n   * If controlID is not provided, generate a unique controlID\n   */\n  private static createControlId = (id: undefined | string) => {\n    let controlID: string;\n    if (typeof id === \"undefined\") {\n      controlID = `googlechart-control-${generateUniqueID()}`;\n    } else {\n      controlID = id;\n    }\n    return controlID;\n  };\n\n  /**\n   * Map the control props to Google Chart Controls\n   */\n  private static createChartControls = (props: UseChartControlsParams) => {\n    const { controls, google } = props;\n    if (!controls) {\n      return null;\n    }\n\n    return controls.map((control, i) => {\n      const {\n        controlID: controlIDMaybe,\n        controlType,\n        options: controlOptions,\n        controlWrapperParams,\n      } = control;\n      const controlID = this.createControlId(controlIDMaybe);\n      return {\n        controlProp: control,\n        control: new google.visualization.ControlWrapper({\n          containerId: controlID,\n          controlType,\n          options: controlOptions,\n          ...controlWrapperParams,\n        }),\n      };\n    });\n  };\n\n  static addControls = (props: UseChartControlsParams) => {\n    const { chartWrapper, chartDashboard } = props;\n    const googleChartControls = this.createChartControls(props);\n    if (!googleChartControls || !chartDashboard || !chartWrapper) {\n      return null;\n    }\n    chartDashboard.bind(\n      googleChartControls.map(({ control }) => control),\n      chartWrapper,\n    );\n    this.initializeControls(googleChartControls);\n    return googleChartControls;\n  };\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  UseChartControlsParams,\n} from \"../../types\";\nimport {\n  FilterControl,\n  GoogleChartControls,\n} from \"../../components/GoogleChartControls\";\nimport { GoogleChartControlsInternal } from \"../../utils/GoogleChartControlsInternal\";\n\nconst useCreateChartControls = (\n  controls: ReactGoogleChartProps[\"controls\"],\n) => {\n  const [chartControls, setChartControls] = React.useState<\n    GoogleChartControl[] | null\n  >(null);\n\n  const controlAndProp = React.useMemo(() => {\n    if (!chartControls || !controls) return null;\n\n    return controls\n      .map((controlProp, i): GoogleChartControlAndProp | undefined => {\n        const control: GoogleChartControl | undefined = chartControls[i];\n        return control ? { controlProp, control } : undefined;\n      })\n      .flatMap((controlAndProp) => (controlAndProp ? [controlAndProp] : []));\n  }, [chartControls, controls]);\n\n  return [controlAndProp, setChartControls] as const;\n};\n\nconst useListenToControlEvents = (\n  chartControls: GoogleChartControlAndProp[],\n  props: UseChartControlsParams,\n) => {\n  React.useEffect(() => {\n    const listeners = GoogleChartControlsInternal.listenToControlEvents(\n      chartControls ?? [],\n      props,\n    );\n\n    return () => {\n      listeners.forEach((listener) => {\n        props.google.visualization.events.removeListener(listener);\n      });\n    };\n  }, [chartControls, props]);\n};\n\nexport type Props = ReactGoogleChartProps & {\n  google: GoogleViz;\n};\n\nexport type GoogleChartControlAndProp = {\n  controlProp: GoogleChartControlProp;\n  control: GoogleChartControl;\n};\n\nexport const useChartControls = (props: UseChartControlsParams) => {\n  const [chartControls, setChartControls] = useCreateChartControls(\n    props.controls,\n  );\n\n  useListenToControlEvents(chartControls ?? [], props);\n\n  /**\n   * Render the container divs for the controls\n   */\n  const renderControl = (filter: FilterControl) => {\n    const { chartWrapper, chartDashboard } = props;\n    return (\n      <GoogleChartControls\n        {...props}\n        isReady={Boolean(chartWrapper && chartDashboard)}\n        chartControls={chartControls}\n        filter={filter}\n      />\n    );\n  };\n\n  return {\n    addControls: (props: UseChartControlsParams) => {\n      const controls = GoogleChartControlsInternal.addControls(props);\n      setChartControls(controls?.map((control) => control.control) ?? null);\n    },\n    renderControl,\n  };\n};\n","import * as React from \"react\";\nimport { ReactGoogleChartProps } from \"../../types\";\nimport { generateUniqueID } from \"../../generate-unique-id\";\n\nexport const useChartId = (\n  props: Pick<ReactGoogleChartProps, \"graphID\" | \"graph_id\">,\n) => {\n  const chartIdRef = React.useRef<string | null>(null);\n  const getChartId = (): string => {\n    const { graphID, graph_id } = props;\n    const chartIdFromProps = graphID || graph_id;\n    let currentChartId: string;\n    if (chartIdFromProps) {\n      currentChartId = chartIdFromProps as string;\n    } else {\n      currentChartId = chartIdRef.current || generateUniqueID();\n    }\n    chartIdRef.current = currentChartId;\n    return chartIdRef.current as string;\n  };\n  const chartId = getChartId();\n  return { chartId };\n};\n","export const DEFAULT_CHART_COLORS = [\n  \"#3366CC\",\n  \"#DC3912\",\n  \"#FF9900\",\n  \"#109618\",\n  \"#990099\",\n  \"#3B3EAC\",\n  \"#0099C6\",\n  \"#DD4477\",\n  \"#66AA00\",\n  \"#B82E2E\",\n  \"#316395\",\n  \"#994499\",\n  \"#22AA99\",\n  \"#AAAA11\",\n  \"#6633CC\",\n  \"#E67300\",\n  \"#8B0707\",\n  \"#329262\",\n  \"#5574A6\",\n  \"#3B3EAC\",\n];\n","import { GoogleViz } from \"./types\";\n\nexport const loadDataTableFromSpreadSheet = async (\n  googleViz: GoogleViz,\n  spreadSheetUrl: string,\n  urlParams: {\n    headers?: number;\n    gid?: any;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  } = {},\n) => {\n  return new Promise((resolve, reject) => {\n    const headers = `${\n      urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`\n    }`;\n    const queryString = `${\n      urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``\n    }`;\n    const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n    const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n    const access_token = `${\n      urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"\n    }`;\n    const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n    const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send((response: any) => {\n      if (response.isError()) {\n        reject(\n          `Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`,\n        );\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n","import { DEFAULT_CHART_COLORS } from \"../constants\";\nimport { UseGoogleChartDataTableParams } from \"../hooks/internal/useGoogleChartDataTable\";\nimport { loadDataTableFromSpreadSheet } from \"../load-data-table-from-spreadsheet\";\nimport { ApplyFormattersParams, GoogleDataTable } from \"../types\";\n\nconst GRAY_COLOR = \"#CCCCCC\";\n\n/**\n * An internal helper class around the Google Chart API.\n * Offers high-level methods to interact with the Google Chart API.\n */\nexport class GoogleChartInternal {\n  private static grayOutHiddenColumnsLabel = (\n    props: UseGoogleChartDataTableParams,\n    hiddenColumns: string[],\n  ) => {\n    const { googleChartWrapper, options } = props;\n    if (!googleChartWrapper) {\n      console.error(\"googleChartWrapper is not defined\");\n      return;\n    }\n    const dataTable = googleChartWrapper.getDataTable();\n    if (!dataTable) return;\n    const columnCount = dataTable.getNumberOfColumns();\n    const hasAHiddenColumn = hiddenColumns.length > 0;\n    if (hasAHiddenColumn === false) return;\n    const colors = Array.from({ length: columnCount - 1 }).map(\n      (_dontcare, i) => {\n        const columnID = this.getColumnId(dataTable, i + 1);\n        if (hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      },\n    );\n    googleChartWrapper.setOptions({\n      ...options,\n      colors,\n    });\n    googleChartWrapper.draw();\n  };\n  /**\n   * Listens to user clicking on the legend to toggle the visibility of a column.\n   * When a user clicks on a legend item, the column id is added to / removed from the hiddenColumns state.\n   */\n  public static listenToLegendToggle = (\n    props: UseGoogleChartDataTableParams,\n    hiddenColumnsState: [\n      string[],\n      React.Dispatch<React.SetStateAction<string[]>>,\n    ],\n  ) => {\n    const [hiddenColumns, setHiddenColumns] = hiddenColumnsState;\n    const { google, googleChartWrapper } = props;\n    if (!googleChartWrapper) {\n      console.error(\"googleChartWrapper is not defined\");\n      return;\n    }\n    return google.visualization.events.addListener(\n      googleChartWrapper,\n      \"select\",\n      () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (\n          selection.length === 0 ||\n          // We want to listen to when a whole row is selected. This is the case only when row === null\n          selection[0].row !== null ||\n          !dataTable\n        ) {\n          return;\n        }\n\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnId(dataTable, columnIndex);\n        // If the column is hidden remove it from state, otherwise add it\n        if (hiddenColumns?.includes(columnID)) {\n          setHiddenColumns((state) => [\n            ...state.filter((colID) => colID !== columnID),\n          ]);\n        } else {\n          setHiddenColumns((state) => [...state, columnID]);\n        }\n      },\n    );\n  };\n\n  /**\n   * (Re-)Draw a Google Chart with the given data, options, and chart type.\n   */\n  public static draw = async (\n    props: UseGoogleChartDataTableParams & { hiddenColumns: string[] },\n  ) => {\n    const {\n      data,\n      diffdata,\n      rows,\n      columns,\n      options,\n      chartType,\n      formatters,\n      spreadSheetUrl,\n      spreadSheetQueryParameters,\n      googleChartDashboard,\n      googleChartWrapper,\n      google,\n      hiddenColumns,\n      legendToggle,\n      legend_toggle,\n    } = props;\n    if (!googleChartWrapper) {\n      console.error(\"draw was called with googleChartWrapper = null\");\n      return;\n    }\n    let dataTable: GoogleDataTable;\n    let chartDiff = null;\n    if (diffdata) {\n      const oldData = google.visualization.arrayToDataTable(diffdata.old);\n      const newData = google.visualization.arrayToDataTable(diffdata.new);\n      chartDiff = google.visualization[chartType].prototype.computeDiff(\n        oldData,\n        newData,\n      );\n    }\n    if (data) {\n      if (data instanceof google.visualization.DataTable) {\n        dataTable = data;\n      } else if (Array.isArray(data)) {\n        dataTable = google.visualization.arrayToDataTable(data);\n      } else {\n        dataTable = new google.visualization.DataTable(data);\n      }\n    } else if (rows && columns) {\n      dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n    } else if (spreadSheetUrl) {\n      dataTable = (await loadDataTableFromSpreadSheet(\n        google,\n        spreadSheetUrl,\n        spreadSheetQueryParameters,\n      )) as GoogleDataTable;\n    } else {\n      dataTable = google.visualization.arrayToDataTable([]);\n    }\n    const columnCount = dataTable.getNumberOfColumns();\n\n    const viewColumns = Array(columnCount)\n      .fill(0)\n      .map((_c, i) => {\n        const columnID = this.getColumnId(dataTable, i);\n        if (hiddenColumns.includes(columnID)) {\n          return {\n            label: dataTable.getColumnLabel(i),\n            type: dataTable.getColumnType(i),\n            calc: () => null,\n          };\n        } else {\n          return i;\n        }\n      });\n    const chart = googleChartWrapper.getChart();\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      chart && chart.clearChart();\n    }\n    googleChartWrapper.setChartType(chartType);\n    googleChartWrapper.setOptions(options || {});\n    const viewTable = new google.visualization.DataView(dataTable);\n    viewTable.setColumns(viewColumns);\n    googleChartWrapper.setDataTable(viewTable);\n    googleChartWrapper.draw();\n    if (googleChartDashboard) {\n      googleChartDashboard.draw(dataTable);\n    }\n\n    if (chartDiff) {\n      googleChartWrapper.setDataTable(chartDiff);\n      googleChartWrapper.draw();\n    }\n    if (formatters) {\n      this.applyFormatters({ dataTable, formatters, google });\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n    }\n    if (legendToggle === true || legend_toggle === true) {\n      this.grayOutHiddenColumnsLabel(props, hiddenColumns);\n    }\n    return;\n  };\n  /**\n   * Get the column ID of a column in a GoogleDataTable.\n   * If the column has an ID, return the ID, otherwise return the label.\n   */\n  private static getColumnId = (\n    dataTable: GoogleDataTable,\n    columnIndex: number,\n  ) => {\n    return (\n      dataTable.getColumnId(columnIndex) ||\n      dataTable.getColumnLabel(columnIndex)\n    );\n  };\n\n  /**\n   * Apply Chart Formatters passed under the formatters prop to the GoogleDataTable\n   */\n  private static applyFormatters = ({\n    dataTable,\n    formatters,\n    google,\n  }: ApplyFormattersParams) => {\n    for (let formatter of formatters) {\n      switch (formatter.type) {\n        case \"ArrowFormat\": {\n          const vizFormatter = new google.visualization.ArrowFormat(\n            formatter.options,\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        case \"BarFormat\": {\n          const vizFormatter = new google.visualization.BarFormat(\n            formatter.options,\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        case \"ColorFormat\": {\n          const vizFormatter = new google.visualization.ColorFormat(\n            formatter.options,\n          );\n          const { ranges } = formatter;\n          if (ranges) {\n            for (let range of ranges) {\n              vizFormatter.addRange(...range);\n            }\n          }\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        case \"DateFormat\": {\n          const vizFormatter = new google.visualization.DateFormat(\n            formatter.options,\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        case \"NumberFormat\": {\n          const vizFormatter = new google.visualization.NumberFormat(\n            formatter.options,\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        case \"PatternFormat\": {\n          const vizFormatter = new google.visualization.PatternFormat(\n            formatter.options,\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        default: {\n          console.warn(`Unknown formatter type: ${formatter.type}`);\n          return;\n        }\n      }\n    }\n  };\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n  GoogleVizEventListener,\n} from \"../../types\";\nimport { GoogleChartInternal } from \"../../utils\";\n\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport type UseGoogleChartDataTableParams = ReactGoogleChartProps & {\n  googleChartWrapper?: GoogleChartWrapper | null;\n  google: GoogleViz;\n  googleChartDashboard?: GoogleChartDashboard | null;\n};\n\nexport const useGoogleChartDataTable = (\n  props: UseGoogleChartDataTableParams,\n) => {\n  const { google, googleChartWrapper, googleChartDashboard } = props;\n  const [hiddenColumns, setHiddenColumns] = React.useState<string[]>([]);\n  // Re-draw the chart when hiddenColumns change\n  React.useEffect(() => {\n    if (!googleChartWrapper) {\n      return;\n    }\n    GoogleChartInternal.draw({\n      ...props,\n      hiddenColumns,\n      googleChartWrapper,\n      googleChartDashboard,\n      google,\n    });\n  }, [\n    hiddenColumns,\n    props.data,\n    props.rows,\n    props.columns,\n    props.options,\n    props.chartLoaderScriptUrl,\n    props.chartType,\n    props.formatters,\n    props.spreadSheetUrl,\n    props.spreadSheetQueryParameters,\n    props.legendToggle,\n    props.legend_toggle,\n  ]);\n\n  // Re-draw the chart when the window is resized\n  const onResize = () => {\n    const { googleChartWrapper } = props;\n    if (!googleChartWrapper) {\n      return;\n    }\n    googleChartWrapper.draw();\n  };\n\n  // Draw the chart when the google charts wrapper is ready and when the hiddenColumns change\n  const initialize = (googleChartWrapper: GoogleChartWrapper) => {\n    const listeners: GoogleVizEventListener[] = [];\n\n    const { legendToggle, legend_toggle } = props;\n    GoogleChartInternal.draw({\n      ...props,\n      hiddenColumns,\n      googleChartWrapper,\n      googleChartDashboard,\n      google,\n    });\n    window.addEventListener(\"resize\", onResize);\n    if (legend_toggle || legendToggle) {\n      const listener = GoogleChartInternal.listenToLegendToggle(props, [\n        hiddenColumns,\n        setHiddenColumns,\n      ]);\n\n      if (listener) listeners.push(listener);\n    }\n\n    return listeners;\n  };\n\n  // Remove event listeners and clear the chart when the component is unmounted\n  const destroy = (\n    googleChartWrapper: GoogleChartWrapper,\n    listeners: GoogleVizEventListener[],\n  ) => {\n    window.removeEventListener(\"resize\", onResize);\n    listeners.forEach((listener) => {\n      google.visualization.events.removeListener(listener);\n    });\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() &&\n        googleChartWrapper.getChart().clearChart();\n    }\n  };\n\n  React.useEffect(() => {\n    if (!googleChartWrapper) {\n      return;\n    }\n    const listeners = initialize(googleChartWrapper);\n    return () => {\n      destroy(googleChartWrapper, listeners);\n    };\n  }, [googleChartWrapper, initialize, destroy]);\n};\n","import { useEffect } from \"react\";\nimport {\n  GoogleChartWrapper,\n  GoogleViz,\n  ReactGoogleChartProps,\n} from \"../../types\";\n\nexport type GoogleChartEventsParams = ReactGoogleChartProps & {\n  googleChartWrapper?: GoogleChartWrapper | null;\n  google: GoogleViz;\n};\n\nconst listenToEvents = (props: GoogleChartEventsParams) => {\n  const { chartEvents, google, googleChartWrapper } = props;\n  if (!chartEvents) {\n    return;\n  }\n  if (!googleChartWrapper) {\n    console.warn(\"listenToEvents was called before chart wrapper ready.\");\n    return;\n  }\n  return chartEvents.map(({ eventName, callback }) => {\n    return google.visualization.events.addListener(\n      googleChartWrapper,\n      eventName,\n      (...args) => {\n        callback({\n          chartWrapper: googleChartWrapper,\n          props,\n          google: google,\n          eventArgs: args,\n        });\n      },\n    );\n  });\n};\n\nexport const useGoogleChartEvents = (props: GoogleChartEventsParams) => {\n  useEffect(() => {\n    if (!props.googleChartWrapper) return;\n\n    const listeners = listenToEvents(props);\n\n    return () => {\n      listeners?.forEach((listener) => {\n        props.google.visualization.events.removeListener(listener);\n      });\n    };\n  }, [props]);\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n  GoogleChartEditor,\n} from \"../types\";\nimport { useChartControls } from \"../hooks/internal/useGoogleChartControls\";\nimport { useChartId } from \"../hooks/internal/useChartId\";\nimport { useGoogleChartDataTable } from \"../hooks/internal/useGoogleChartDataTable\";\nimport { useGoogleChartEvents } from \"../hooks/internal/useGoogleChartEvents\";\n\ntype Props = ReactGoogleChartProps & {\n  google: GoogleViz;\n};\n\nexport const GoogleChart: React.FC<Props> = (props) => {\n  const [googleChartWrapper, setGoogleChartWrapper] =\n    React.useState<GoogleChartWrapper | null>(null);\n  // const [isReady, setIsReady] = React.useState<boolean>(false);\n  const [googleChartDashboard, setGoogleChartDashboard] =\n    React.useState<GoogleChartDashboard | null>(null);\n\n  const { addControls, renderControl } = useChartControls({\n    ...props,\n    chartDashboard: googleChartDashboard,\n    chartWrapper: googleChartWrapper,\n  });\n  useGoogleChartEvents({\n    ...props,\n    googleChartWrapper,\n  });\n  const { chartId } = useChartId(props);\n  const dashboardRef = React.useRef<HTMLDivElement>(null);\n  const toolbarRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper,\n      onLoad,\n    } = props;\n\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: chartId,\n      ...chartWrapperParams,\n    };\n    // Create ChartWrapper instance, pass it to the user and store it in state\n    const chartWrapper = new google.visualization.ChartWrapper(chartConfig);\n    chartWrapper.setOptions(options || {});\n    getChartWrapper?.(chartWrapper, google);\n\n    // Create Dashboard instance, needed for controls\n    const chartDashboard = new google.visualization.Dashboard(\n      dashboardRef.current,\n    );\n\n    // Create toolbar if needed\n    if (toolbarItems) {\n      google.visualization.drawToolbar(\n        toolbarRef.current as HTMLDivElement,\n        toolbarItems,\n      );\n    }\n\n    // Create ChartEditor instance if needed and pass it to the user\n    let chartEditor: GoogleChartEditor | null = null;\n    if (getChartEditor) {\n      chartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor,\n        chartWrapper,\n        google,\n      });\n    }\n    // Create and add controls to the chart / dashboard\n    addControls({ ...props, chartDashboard, chartWrapper });\n    setGoogleChartWrapper(chartWrapper);\n    setGoogleChartDashboard(chartDashboard);\n    onLoad?.(google, {\n      google,\n      chartWrapper,\n      chartEditor,\n      chartDashboard,\n    });\n  }, []);\n\n  useGoogleChartDataTable({\n    ...props,\n    googleChartWrapper,\n    googleChartDashboard,\n  });\n  const renderChart = () => {\n    const { width, height, options, style, className, rootProps, google } =\n      props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    return (\n      <div id={chartId} style={divStyle} className={className} {...rootProps} />\n    );\n  };\n\n  const renderToolBar = () => {\n    if (!props.toolbarItems) return null;\n    return <div ref={toolbarRef} />;\n  };\n\n  const { width, height, options, style } = props;\n\n  const divStyle = {\n    height: height || (options && options.height),\n    width: width || (options && options.width),\n    ...style,\n  };\n\n  // If render prop is provided, give the user full control over the rendering by passing renderChart, renderControl and renderToolbar functions\n  if (props.render) {\n    return (\n      <div ref={dashboardRef} style={divStyle}>\n        <div ref={toolbarRef} id=\"toolbar\" />\n        {props.render({\n          renderChart,\n          renderControl,\n          renderToolbar: renderToolBar,\n        })}\n      </div>\n    );\n  } else {\n    return (\n      <div ref={dashboardRef} style={divStyle}>\n        {renderControl(\n          ({ controlProp }) => controlProp.controlPosition !== \"bottom\",\n        )}\n        {renderChart()}\n        {renderControl(\n          ({ controlProp }) => controlProp.controlPosition === \"bottom\",\n        )}\n        {renderToolBar()}\n      </div>\n    );\n  }\n};\n\nexport default GoogleChart;\n","import * as React from \"react\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { ReactGoogleChartProps } from \"./types\";\n\nexport const ChartContext = React.createContext(chartDefaultProps);\n\nexport const ContextProvider = ({\n  children,\n  value,\n}: {\n  children: any;\n  value: ReactGoogleChartProps;\n}) => {\n  return (\n    <ChartContext.Provider value={value}>{children}</ChartContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { ReactGoogleChartProps } from \"./types\";\nimport { useLoadGoogleCharts } from \"./hooks\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { GoogleChart } from \"./components/GoogleChart\";\nimport { ContextProvider } from \"./Context\";\n\n/**\n * Loads Google Charts JS and renders the GoogleChart component.\n */\nconst ChartView: React.FC<ReactGoogleChartProps> = (props) => {\n  const { google, isLoading, error } = useLoadGoogleCharts(props);\n  if (isLoading) {\n    return props.loader ?? null;\n  }\n  if (error) {\n    return props.errorElement ?? null;\n  }\n  if (google) {\n    return <GoogleChart google={google} {...props} />;\n  }\n  return null;\n};\n\n/**\n * Updates the context with the props and renders ChartView.\n */\nexport const Chart: React.FC<ReactGoogleChartProps> = (userProps) => {\n  const props = { ...chartDefaultProps, ...userProps };\n  return (\n    <ContextProvider value={props}>\n      <ChartView {...props} />\n    </ContextProvider>\n  );\n};\n\nexport default Chart;\n","// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\n\nexport type GoogleVizDrawToolbar = (\n  toolbarContainer: HTMLDivElement,\n  components: GoogleChartToolbarItem[],\n) => any;\n\nexport type GoogleViz = {\n  charts: GoogleChartLoader;\n  visualization: {\n    ChartWrapper: GoogleChartWrapper;\n    ControlWrapper: GoogleChartControl;\n    ChartEditor: GoogleChartEditor;\n    DataTable: GoogleDataTable;\n    events: GoogleVizEvents;\n    arrayToDataTable: GoogleArrayToDataTable;\n    drawToolbar: GoogleVizDrawToolbar;\n    [otherKeys: string]: any;\n  };\n};\n\nexport type GoogleChartTicks = (number | Date)[];\n\nexport type GoogleChartEditor = {\n  new (): GoogleChartEditor;\n  openDialog: (\n    chartWrapper: GoogleChartWrapper,\n    chartEditorOptions?: {\n      dataSourceInput?: any;\n      [otherKeyMaybe: string]: any;\n    },\n  ) => null;\n  getChartWrapper: () => GoogleChartWrapper;\n  setChartWrapper: (chartWrapper: GoogleChartWrapper) => GoogleChartWrapper;\n  closeDialog: () => null;\n};\n\nexport type GoogleChartLoaderOptions = {\n  packages?: GoogleChartPackages[];\n  language?: string;\n  mapsApiKey?: string;\n};\nexport type GoogleChartLoader = {\n  load: (\n    version: GoogleChartVersion,\n    googleChartOptions: GoogleChartLoaderOptions,\n  ) => void;\n  setOnLoadCallback: (callback: () => void) => void;\n};\nexport interface ChartWrapperProps {\n  chartType: GoogleChartWrapperChartType;\n  containerId?: string;\n  options?: {\n    width?: number;\n    height?: number;\n    is3D?: boolean;\n    title?: string;\n    backgroundColor: string;\n  };\n  dataTable?: {};\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view?: any[] | {};\n  render?: (props: ChartWrapperProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (\n    props: ChartWrapperProps,\n    chartWrapper: GoogleChartWrapper,\n  ) => any;\n}\n\nexport type VizEventsProps = {\n  chartWrapper: GoogleChartWrapper;\n  onReady?: (chartWrapper: GoogleChartWrapper) => any;\n  onError?: (chartWrapper: GoogleChartWrapper) => any;\n  onSelect?: (selection: Array<{ row?: any; column?: any }>) => any;\n  render?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n};\n\n/*\n *\n * <GoogleChartsTypes>\n *\n */\n\n/*\n *\n * Reference + Docs:\n * https://developers.google.com/chart/interactive/docs/reference#constructor_3\n * https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n *\n */\nexport type GoogleChartWrapperChartType =\n  | \"AnnotationChart\"\n  | \"AreaChart\"\n  | \"BarChart\"\n  | \"BubbleChart\"\n  | \"Calendar\"\n  | \"CandlestickChart\"\n  | \"ColumnChart\"\n  | \"ComboChart\"\n  | \"DiffChart\"\n  | \"DonutChart\"\n  | \"Gantt\"\n  | \"Gauge\"\n  | \"GeoChart\"\n  | \"Histogram\"\n  | \"LineChart\"\n  | \"Line\"\n  | \"Bar\"\n  | \"Map\"\n  | \"OrgChart\"\n  | \"PieChart\"\n  | \"Sankey\"\n  | \"ScatterChart\"\n  | \"Scatter\"\n  | \"SteppedAreaChart\"\n  | \"Table\"\n  | \"Timeline\"\n  | \"TreeMap\"\n  | \"WaterfallChart\"\n  | \"WordTree\";\n\n// https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\nexport interface ChartWrapperOptions {\n  chartType: string;\n  containerId: string;\n  options: Partial<{\n    width: number;\n    height: number;\n    is3D: boolean;\n    title: string;\n    backgroundColor:\n      | string\n      | { fill: string; stroke: string; strokeWidth: number };\n    hAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    vAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    legend: any;\n    colors: string[];\n    [otherOptionKey: string]: any;\n  }>;\n  dataTable?: GoogleDataTable;\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view: any[] | {};\n  [otherOptionKey: string]: any;\n}\n\nexport type GoogleChartAction = {\n  id: string;\n  text: string;\n  action: (chartWrapper: GoogleChartWrapper) => void;\n};\n\nexport type GoogleChartControlProp = {\n  controlType:\n    | \"CategoryFilter\"\n    | \"ChartRangeFilter\"\n    | \"DateRangeFilter\"\n    | \"NumberRangeFilter\"\n    | \"StringFilter\";\n  options: {};\n  controlWrapperParams?: {};\n  controlID?: string;\n  controlPosition?: \"top\" | \"bottom\";\n  controlEvents?: ReactGoogleChartEvent[];\n};\n\nexport type GoogleChartWrapper = {\n  new (chartWrapperOptions: Partial<ChartWrapperOptions>): GoogleChartWrapper;\n  draw: (chartArgs?: ChartWrapperProps) => any;\n  toJSON: () => string;\n  clone: () => GoogleChartWrapper;\n  getDataSourceUrl: () => string;\n  getDataTable: () => GoogleDataTable | null; // null if datasourceurl set or ref to DataTable\n  getChartType: () => GoogleChartWrapperChartType;\n  getChartName: () => string;\n  getChart: () => {\n    removeAction: (actionID: string) => void;\n    getSelection: () => { row?: any; column?: any }[];\n    setAction: (ChartAction: GoogleChartAction) => void;\n    getImageURI: () => void;\n    clearChart: () => void; // Clears the chart, and releases all of its allocated resources.\n  }; // ref to chart\n  getContainerId: () => string;\n  getQuery: () => string;\n  getRefreshInterval: () => number;\n  getOption: (key: string, opt_default_value?: any) => any; // returns opt_default_value if key not found\n  getOptions: () => {};\n  getSelection: () => { row?: any; column?: any }[];\n  getView: () => {} | any[]; // Same format as toJSON\n\n  setDataSourceUrl: (url: string) => void;\n  setDataTable: (table: any) => void;\n  setChartType: (chartType: GoogleChartWrapperChartType) => void;\n  setChartName: (name: string) => void; // Sets an arbitrary name for the chart. This is not shown anywhere on the chart, unless a custom chart is explicitly designed to use it.\n  setContainerId: (id: string) => void; // Sets the ID of the containing DOM element for the chart.\n  setQuery: (query_string: string) => void; // Sets a query string, if this chart queries a data source. You must also set the data source URL if specifying this value.\n  setRefreshInterval: (interval: number) => void; // Sets the refresh interval for this chart, if it queries a data source. You must also set a data source URL if specifying this value. Zero indicates no refresh.\n  setOption: (key: string, value: any) => void; // \tSets a single chart option value, where key is the option name and value is the value. To unset an option, pass in null for the value. Note that key may be a qualified name, such as 'vAxis.title'.\n  setOptions: (options_obj: Partial<ChartWrapperOptions[\"options\"]>) => void; //\n};\n\nexport type GoogleVizEventListener = {\n  key: Record<string, unknown>;\n};\n\nexport type GoogleVizEventName =\n  | \"ready\"\n  | \"error\"\n  | \"select\"\n  | \"animationfinish\"\n  | \"statechange\"\n  | \"ok\"\n  | \"cancel\"\n  | \"animationstart\";\n\nexport type GoogleVizEvents = {\n  addListener: (\n    chartWrapper: GoogleChartWrapper | GoogleChartControl | GoogleChartEditor,\n    name: GoogleVizEventName,\n    onEvent: (chartWrapper: GoogleChartWrapper) => any,\n  ) => GoogleVizEventListener;\n  removeListener: (eventListener: GoogleVizEventListener) => any;\n  removeAllListeners: (chartWrapper: GoogleChartWrapper) => any;\n};\n\nexport type GoogleChartPackages =\n  | \"corechart\"\n  | \"charteditor\"\n  | \"controls\"\n  | \"calendar\"\n  | \"gantt\"\n  | \"gauge\"\n  | \"geochart\"\n  | \"map\"\n  | \"orgchart\"\n  | \"sankey\"\n  | \"table\"\n  | \"timeline\"\n  | \"treemap\"\n  | \"wordtree\";\n\nexport type GoogleChartVersion = \"current\" | \"upcoming\" | string;\n\nexport type GoogleDataTableColumnType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"date\"\n  | \"datetime\"\n  | \"timeofday\";\n\n// export type GoogleDataTable = {\n//   addColumn: (type: GoogleDataTableColumnType) => number;\n// };\n\n// Reference https://developers.google.com/chart/interactive/docs/roles\nexport enum GoogleDataTableColumnRoleType {\n  annotation = \"annotation\",\n  annotationText = \"annotationText\",\n  certainty = \"certainty\",\n  emphasis = \"emphasis\",\n  interval = \"interval\",\n  scope = \"scope\",\n  style = \"style\",\n  tooltip = \"tooltip\",\n  domain = \"domain\",\n}\n\nexport type GoogleDataTableColumn =\n  | {\n      type: GoogleDataTableColumnType;\n      label?: string; //  A label for the column.\n      role?: GoogleDataTableColumnRoleType;\n      pattern?: string;\n      p?: {};\n      id?: string;\n    }\n  | string;\n\n// Ref : https://developers.google.com/chart/interactive/docs/reference#dataparam\n\nexport type GoogleDataTableCell =\n  | {\n      v?: any; // The cell value. Type should match DataTableColumn type field\n      f?: string; // A string version of the v value, formatted for display.\n      p?: {};\n    }\n  | string\n  | number\n  | boolean\n  | Date\n  | null;\n\nexport type GoogleDataTableRow = GoogleDataTableCell[];\n\nexport type GoogleDataTableJS = {\n  cols: GoogleDataTableColumn[];\n  rows: {\n    c: GoogleDataTableRow;\n  }[];\n  p?: {};\n};\n\n// Reference : https://developers.google.com/chart/interactive/docs/reference#DataTable\n\nexport type GoogleDataTableRowFilter = {\n  column: number;\n  value: any;\n  minValue?: any;\n  maxValue?: any;\n};\n\nexport type GoogleDataTableSortColumns =\n  | number\n  | {\n      column: number;\n      desc: boolean;\n    }\n  | number[]\n  | {\n      column: number;\n      desc: boolean;\n    }[];\n\nexport type GoogleDataTable = {\n  // https://developers.google.com/chart/interactive/docs/reference#dataparam\n  new (dataParam: any): GoogleDataTable;\n  addColumn: (column: GoogleDataTableColumn) => number;\n  addRow: (row?: GoogleDataTableRow) => number;\n  addRows: (rows?: GoogleDataTableRow[] | number[] | any[]) => number;\n  clone: () => GoogleDataTable;\n\n  getColumnId: (columnIndex: number) => string;\n  getColumnLabel: (columnIndex: number) => string;\n  getColumnPattern: (columnIndex: number) => string;\n  getColumnProperties: (columnIndex: number) => {};\n  getColumnProperty: (columnIndex: number, name: string) => any;\n  getColumnRange: (columnIndex: number) => {\n    min: number | null;\n    max: number | null;\n  };\n  getColumnRole: (columnIndex: number) => GoogleDataTableColumnRoleType;\n  getColumnType: (columnIndex: number) => GoogleDataTableColumnType;\n  getDistinctValues: (columnIndex: number) => any[];\n  getFilteredRows: (filters: GoogleDataTableRowFilter[]) => number[];\n  getFormattedValue: (rowIndex: number, columnIndex: number) => string;\n  getNumberOfColumns: () => number;\n  getNumberOfRows: () => number;\n  getProperties: (rowIndex: number, columnIndex: number) => {};\n  getProperty: (rowIndex: number, columnIndex: number, name: string) => any;\n  getRowProperties: (rowIndex: number) => {};\n  getRowProperty: (rowIndex: number, name: string) => any;\n  getSortedRows: (sortColumns: GoogleDataTableSortColumns) => number[];\n  getTableProperties: () => {};\n  getTableProperty: (name: string) => any;\n  getValue: (\n    rowIndex: number,\n    columnIndex: number,\n  ) => boolean | string | number | Date | number[] | null;\n  insertColumn: (\n    columnIndex: number,\n    type: GoogleDataTableColumnType,\n    label?: string,\n    id?: string,\n  ) => void;\n  insertRows: (\n    rowIndex: number,\n    numberOrArray: GoogleDataTableRow[] | number,\n  ) => void;\n  removeColumn: (columnIndex: number) => void;\n  removeColumns: (columnIndex: number, numberOfColumns: number) => void;\n  removeRow: (rowIndex: number) => void;\n  removeRows: (rowIndex: number, numberOfColumns: number) => void;\n  setCell: (\n    rowIndex: number,\n    columnIndex: number,\n    value?: any,\n    formattedValue?: string,\n    properties?: {},\n  ) => {};\n  setColumnLabel: (columnIndex: number, label: string) => void;\n  setColumnProperty: (columnIndex: number, name: string, value: any) => void;\n  setColumnProperties: (columnIndex: number, properties: {} | null) => void;\n  setFormattedValue: (\n    rowIndex: number,\n    columnIndex: number,\n    formattedValue: string,\n  ) => void;\n  setProperty: (\n    rowIndex: number,\n    columnIndex: number,\n    name: string,\n    value: any,\n  ) => void;\n  setProperties: (\n    rowIndex: number,\n    columnIndex: number,\n    properties: {} | null,\n  ) => void;\n\n  setRowProperty: (rowIndex: number, name: string, value: any) => void;\n  setRowProperties: (rowIndex: number, properties: {} | null) => void;\n  setTableProperties: (properties: {} | null) => void;\n  setValue: (rowIndex: number, columnIndex: number, value: boolean | string | number | Date | number[] | null) => void;\n  sort: (sortColumns: GoogleDataTableSortColumns) => void;\n  toJSON: () => string; // GoogleDataTableJS\n};\n\nexport type GoogleArrayToDataTable = (\n  data: any[][],\n  isFirstRowLabels?: boolean,\n) => GoogleDataTable;\n\nexport type GoogleChartOptions = {\n  width?: number;\n  height?: number;\n  is3D?: boolean;\n  backgroundColor: string;\n\n  title?: string;\n  hAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  vAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  bubble?: {};\n  pieHole?: number;\n  redColor?: string;\n  redFrom?: number;\n  redTo?: number;\n  yellowColor?: string;\n  yellowFrom?: number;\n  yellowTo?: number;\n  greenColor?: string;\n  greenFrom?: number;\n  greenTo?: number;\n  minorTicks?: number;\n  majorTicks?: string[];\n  legend?:\n    | string\n    | {\n        position?: string;\n        maxLines?: number;\n        [otherOptionKey: string]: any;\n      };\n  curveType?: string;\n  showTooltip?: boolean;\n  showInfoWindow?: boolean;\n  allowHtml?: boolean;\n  isStacked?: string | boolean;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  headerHeight?: number;\n  fontColor?: string;\n  showScale?: boolean;\n  bar?: { groupWidth?: string }; // Remove space between bars.\n  candlestick?: {\n    fallingColor?: { strokeWidth?: number; fill?: string }; // red\n    risingColor?: { strokeWidth?: number; fill?: string }; // green\n    [otherOptionKey: string]: any;\n  };\n  wordtree?: {\n    format?: string;\n    word?: string;\n    [otherOptionKey: string]: any;\n  };\n  [otherOptionKey: string]: any;\n};\n\n/*\n *\n * </GoogleChartsTypes>\n *\n */\n\nexport type WindowWithMaybeGoogle = Window & { google?: any };\n\nexport type ReactGoogleChartEvent = {\n  eventName: GoogleVizEventName;\n  callback: (eventCallbackArgs: {\n    chartWrapper: GoogleChartWrapper | null;\n    controlWrapper?: GoogleChartControl;\n    props: ReactGoogleChartProps;\n    google: GoogleViz;\n    eventArgs: any;\n  }) => void;\n};\n\nexport type GoogleChartToolbarItem = {\n  type: \"igoogle\" | \"html\" | \"csv\" | \"htmlcode\";\n  datasource: string;\n  gadget?: string;\n  userPrefs?: {\n    \"3d\": number;\n    [otherKeyMaybe: string]: any;\n  };\n};\n\nexport type GoogleChartFormatter = {\n  column: number | number[];\n  type:\n    | \"ArrowFormat\"\n    | \"BarFormat\"\n    | \"ColorFormat\"\n    | \"DateFormat\"\n    | \"NumberFormat\"\n    | \"PatternFormat\";\n  options?: {};\n  ranges?: [\n    // from\n    any,\n    // to\n    any,\n    // color\n    string,\n    // bgcolor\n    string,\n  ][];\n};\n\nexport type ReactGoogleChartProps = {\n  height?: string | number;\n  width?: string | number;\n  graphID?: string;\n  chartType: GoogleChartWrapperChartType;\n  diffdata?: {\n    old: any;\n    new: any;\n  };\n  options?: ChartWrapperOptions[\"options\"];\n  loader?: JSX.Element;\n  errorElement?: JSX.Element;\n  data?: any[] | {};\n  rows?: GoogleDataTableRow[];\n  columns?: GoogleDataTableColumn[];\n  chartActions?: GoogleChartAction[];\n  chartEvents?: ReactGoogleChartEvent[];\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n  graph_id?: string;\n  legendToggle?: boolean;\n  legend_toggle?: boolean;\n  onLoad?: (\n    google: GoogleViz,\n    paramsV2: {\n      google: GoogleViz;\n      chartWrapper: GoogleChartWrapper;\n      chartDashboard: GoogleChartDashboard;\n      chartEditor?: GoogleChartEditor | null;\n    },\n  ) => void;\n  getChartWrapper?: (\n    chartWrapper: GoogleChartWrapper,\n    google: GoogleViz,\n  ) => void;\n  getChartEditor?: (args: {\n    chartEditor: GoogleChartEditor;\n    chartWrapper: GoogleChartWrapper;\n    google: GoogleViz;\n  }) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  formatters?: GoogleChartFormatter[];\n  spreadSheetUrl?: string;\n  spreadSheetQueryParameters?: {\n    headers: number;\n    gid?: number | string;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  };\n  rootProps?: any;\n  controls?: GoogleChartControlProp[];\n  render?: ReactGoogleChartDashboardRender;\n  //https://developers.google.com/chart/interactive/docs/gallery/toolbar#example_1\n  toolbarItems?: GoogleChartToolbarItem[];\n  toolbarID?: string;\n  chartWrapperParams?: any;\n  /**\n   * URL of the chart loader script. Defaults to https://www.gstatic.com/charts/loader.js\n   * Added to support loading from a different CDN in China to optimize performance\n   */\n  chartLoaderScriptUrl?: string;\n};\n\nexport type GoogleChartDashboard = {\n  draw: (data: GoogleDataTable) => void;\n  bind: (\n    controlWrapperOrWrappers: GoogleChartControl | GoogleChartControl[],\n    chartWrapper: GoogleChartWrapper,\n  ) => void;\n};\n\nexport type ReactGoogleChartDashboardRender = ({\n  renderControl,\n  renderChart,\n  renderToolbar,\n}: {\n  renderControl: (\n    filter: ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => boolean,\n  ) => any;\n  renderChart: () => any;\n  renderToolbar: () => any;\n}) => any;\nexport type GoogleChartControlOptions = any;\nexport type GoogleChartControl = {\n  new (chartWrapperOptions: GoogleChartControlOptions): GoogleChartControl;\n  getContainerId: () => string;\n  getOptions: () => GoogleChartControlOptions;\n  getState: () => any;\n  setState: (state: any) => void;\n  setOptions: (options: GoogleChartControlOptions) => void;\n  setControlType: (controlType: string) => void;\n};\n\nexport type ReactGoogleChartState = {\n  loadingStatus: \"loading\" | \"errored\" | \"ready\";\n  google: null | GoogleViz;\n  // hiddenColumns: string[];\n};\n\nexport type ReactGoogleChartContext = {\n  data: ReactGoogleChartProps[\"data\"];\n  rows: ReactGoogleChartProps[\"rows\"] | null;\n  columns: ReactGoogleChartProps[\"columns\"] | null;\n  diffdata: ReactGoogleChartProps[\"diffdata\"] | null;\n  options: ReactGoogleChartProps[\"options\"] | null;\n  legend_toggle: ReactGoogleChartProps[\"legend_toggle\"] | null;\n  legendToggle: ReactGoogleChartProps[\"legendToggle\"] | null;\n  chartType: ReactGoogleChartProps[\"chartType\"] | null;\n  formatters: ReactGoogleChartProps[\"formatters\"] | null;\n  spreadSheetUrl: ReactGoogleChartProps[\"spreadSheetUrl\"] | null;\n  spreadSheetQueryParameters:\n    | ReactGoogleChartProps[\"spreadSheetQueryParameters\"]\n    | null;\n};\n\nexport interface ApplyFormattersParams {\n  dataTable: GoogleDataTable;\n  formatters: GoogleChartFormatter[];\n  google: GoogleViz;\n}\n\nexport type GoogleChartControlAndProp = {\n  controlProp: GoogleChartControlProp;\n  control: GoogleChartControl;\n};\n\nexport type UseChartControlsParams = ReactGoogleChartProps & {\n  google: GoogleViz;\n  chartWrapper: GoogleChartWrapper | null;\n  chartDashboard: GoogleChartDashboard | null;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}